workDir = '/projects/single_cell_stitchit/work/binned_RF/nf_pipeline/work'
params.gtf_file = '/projects/single_cell_stitchit/work/binned_RF/input/paired_PBMC10k/gencode.v38.annotation.gtf'
params.activity.extension = '_lsi_activity_1MB500bp.txt.gz'

params {
    // MetaCellaR
    metacellar {
        publishDir = "${projectDir}/results/MetaCellaR"
        input_file = "/projects/single_cell_stitchit/work/binned_RF/input/paired_PBMC10k/seurat/10xpbmc_10k_scatac_scrna_coembed_Fatemeh.rds"
        gtf_file = params.gtf_file
        output_dir = "metaCellaR_200_normalized"
        rna_count_slot = "assays\$RNA@counts"
        atac_count_slot = "assays\$ATAC@counts"
        celltype_info = "meta.data\$seurat_annotations"
        assay_slot = "meta.data\$orig.ident"
        expected_cells = 200
        umap_dim = 20
        reduction = "umap"
        metadata = ["seurat_annotations"]
        normalization_flag = 'T'
        umap_flag = 'T'
        metacellar_script = "${projectDir}/bin/MetaCellaR.R"
    }

    metacell_filtering {
        publishDir = "${projectDir}/results/filtered_metacells_mc200"
        atac_threshold = 200000 
        out_suffix = "_valid_metacells.csv"  
        filtering_script = "${projectDir}/bin/mc_filtering.R"
    }

    activity_binning {
        publishDir = "${projectDir}/results/binned_activity_1MB500bp_mc200_all_features"
        fragment_file = "/projects/single_cell_stitchit/work/binned_RF/input/paired_PBMC10k/seurat/data/atac/pbmc_granulocyte_sorted_10k_atac_fragments_test.tsv"
        //cb_mc_file = "/projects/single_cell_stitchit/work/binned_RF/input/paired_PBMC10k/metaCellaR_100_normalized/results/ATAC_cell2metacell_info_valid_metacells.csv",
        //rna_file = "/projects/single_cell_stitchit/work/binned_RF/input/paired_PBMC10k/metaCellaR_100_normalized/results/cellSummarized_sum_RNA_valid_metacells.csv",
        gtf_file = params.gtf_file
        chrom_sizes_file = "/projects/single_cell_stitchit/work/binned_RF/input/hg38_chrom_sizes.txt"
        tmp_dir = "/projects/single_cell_stitchit/work/binned_RF/tmp"
        out_dir_activity = "mc200_1MB500bp_binned_lsi_activity_all_features"
        out_dir_fragments = "mc200_fragments_chrom"
        out_extension = params.activity.extension
        test_partition_flag = "TRUE"
        test_cells_file = "test_meta_cells_200.txt" // input or output file depending on test_partition_flag
        test_cells_percent = 20 // only used if test_partition_flag is TRUE
        feature_select_flag = "FALSE"
        q_top_features = "q85" // only used if feature_select_flag is TRUE
        normalize_flag = "FALSE" // RNA normalization (CPM): set to FALSE for metacell-mode, normalization is done in MetaCellaR
        scaling_factor = 10000 // scaling factor for normalization, only used if normalize_flag is TRUE
        mc_flag = "TRUE"
        extension_size = 500000
        bin_size = 500
        n_outer_cores = 5
        n_inner_cores = 5
        n_threads_feature_counts = 5
        seed=123
        activity_script = "${projectDir}/bin/generate_binned_activity_parallel.R"
    }

    rf_learning {
        //TODO: add RF parameters for fine-tuning
        publishDir = "${projectDir}/results/rf_results_1MB500bp_mc200_all_features"
        rf_python_script = "${projectDir}/bin/setup_RF_individualGene_lsi_pbmc_meta_cell_all_features.py"
        // Input parameters
        //input_dir = "/path/to/your/input/files"
        //test_cells = "/path/to/test_cells.txt"
        input_extension = params.activity.extension
        //Model parameters
        model_type = 'RF'
        seed_value = 0 // Random seed for reproducibility
        expr_threshold = 'None' //0.01
        min_nonzero_expr = 'None' //1
        min_mc_total = 30
        min_nonzero_feature_mat = 'None' //2
        // Output directories
        plot_dir = "rf_results_200mc/plots"
        log_dir = "rf_results_200mc/logs"
        model_dir = "rf_results_200mc/models"
        performance_dir = "rf_results_200mc/performance"
        // Execution control
        n_jobs = 25
        timeout = "10m"
    }
}

// cleanup = true

// //set work directory
// workDir = '/projects/single_cell_stitchit/work/work'

// // set path to executable files for stitch-it (STITCH = segmentation step) and bam_merge 
// env.stitchDir = "${HOME}/STITCHIT/build/core/STITCH"
// env.bamMergeDir = "${HOME}/bam_merge-master/build/core/bam_merge" 

// /////////////////////////////////////////////////////////////////////////////////////////
// //MetaCellaR parameters

// //set output path
// env.metacellarFolder = "${projectDir}/results/metaCellaR"

// //set input pipeline = input MetaCellaR
// params.singlecells = "${projectDir}/chr21_sim_coembedding_atac_10000_200000_rna_10500_100000_umap20.rds"

// // default values k=#cells_in_ct/30 (#clusters), t=3*e (threshold), e=30 (mccells), ie. expected cells per mc
// //params rna, atac, ctype, assay, metadata are specific to structure of input Seurat object
// params.rna = 'assays$RNA@counts'
// params.atac = 'assays$peaks@counts'
// params.ctype = 'meta.data$cell.types' 
// params.clusters = null 
// //name output folder
// params.mout = 'sim_200k100k_90_t8_chr21' 
// params.assay = 'meta.data$identity'
// params.umapflag = 'T'
// params.mccells = 90
// params.treshold = null
// params.umapdims = 20 // (Default)
// params.reductions = 'umap'
// // gtf file
// params.gtf = "${projectDir}/gencode.v19.annotation.gtf"
// params.metadata = 'c("cell.types")'
// params.normalization = 'F'  

// /////////////////////////////////////////////////////////////////////////////////////////
// // Discretization parameters

// // set output directory
// env.discretizationFolder = "${projectDir}/results/Discretization/sim_200k100k_90_t8_chr21"

// params.normalize = true 
// params.gtf = "${projectDir}/gencode.v19.annotation.gtf"
// params.plot = true 
// params.binary = true 
// params.ensout = 'sim_ensemble_ge_counts.tsv'
// params.dout = 'sim_discretized_ge.tsv' 
// params.tpmout = 'sim_tpm_normalized_ge_counts.tsv' 
// params.glout = 'sim_gene_lengths.txt' 

// /////////////////////////////////////////////////////////////////////////////////////////
// // Bam_Merge parameters

// //set output directory
// env.bam_mergeFolder = "${projectDir}/results/bam_merge-master"

// //Flag options: -X (10x), -D (non 10x ATAC)
// //Start position of cell barcode in read name for non-10x data required
// params.bamfile = "${projectDir}/ATAC_merged_subsamples_10000_200000_tagged_merged_chr21.bam"  
// params.bamflag = '-X'
// params.pos = null
// //name output folder
// params.outdir = 'sim200k_chr21'

// /////////////////////////////////////////////////////////////////////////////////////////
// // DeepTools parameters
// // deeptools bamcoverage function creates multiple bedgraph files that are sorted and merged to one bigwig file
// // problem: error when tmp directory full
// // change tmp dir to avoid problems -> within process

// // set deeptools output folder
// env.bamcoverageFolder = "${projectDir}/results/bamcoverage/sim200k_chr21"

// params.norm = 'RPKM'
// params.binsize = 50 //Default 50
// params.processors = 27

// /////////////////////////////////////////////////////////////////////////////////////////
// //STITCHIT segmentation parameters

// //set to same path as bamcoverageFolder!
// params.bw = "${projectDir}/bamcoverage/sim200k_chr21" 
// params.gtf = "${projectDir}/gencode.v19.annotation.chr.gtf" 
// params.chromsizes = "${projectDir}/hg19_chrom_sizes_chr.txt"
// params.window = 5000
// params.cores = 27
// params.pvalue = 0.05
// // params.target = 'SNHG11' 
// params.resolution = 10
// // output folder
// params.stitchitout = 'segmentation_200k100k_90_t8_5kb_chr21'
// params.searchspace = 1100000 
// params.segmentsize = 5000
// params.downsample = 100
// params.corrmeasure= "Both"
// params.samplevector= null

// /////////////////////////////////////////////////////////////////////////////////////////
// //nested STITCHIT 
// params.folds = 10
// /////////////////////////////////////////////////////////////////////////////////////////

// //STITCHIT regression parameters
// params.response="Expression"    //Name of the response variable
// params.fixedAlpha = null        //Use a fixed value for the alpha parameter in elastic net regulatisation, do not perform a grid search
// params.alpha = 0.05             //Stepsize to optimise the alpha parameter in elastic net regularisation (default 0.05)
// params.testsize = 0.2           //Size of test data[%] (default 0.2)
// params.regularization = 'E'     //regularisation L for Lasso, R for Ridge, and E for Elastic net (default E)
// params.innerCV = 6              //Number of folds for inner cross-validation (default 6)
// params.outerCV = 3              //Number of iterations of outer cross-validation to determine test error (default 3)
// params.constraint = null         //Specifies a constraint on the coefficent sign, enter N for negative and P for positive constraint
// params.performance = 'TRUE'     //Flag indiciating whether the performance of the model should be assessed (default TRUE)
// params.seed = null              //Random seed used for random number generation (default random)
// params.leaveOneOutCV = 'FALSE'  //Flag indicating whether a leave one out cross-validation should be used (default FALSE)
// params.asRData = 'FALSE'        //Store feature coefficients as RData files (default FALSE)
// params.randomise = 'FALSE'      //Randomise the feature matrix (default FALSE)
// params.logResponse = 'TRUE'     //Flag indicating whether the response variable should be log transformed (default TRUE)
// params.ftest = 'FALSE'          //Flag indicating whether partial F-test should be computed to assess the significance of each feature (default FALSE)
// params.coefP = 1                //p-value threshold for model coefficient (default 1, all OLS coefs will be returned)

// // set input and output directory for stitchit regression (input = output STITCHIT)
// env.StitchItFolder = "/projects/single_cell_stitchit/work/results/sc_STITCHIT_updated/STITCHIT/${params.stitchitout}"
// env.RegressionFolder = "/projects/single_cell_stitchit/work/results/sc_STITCHIT_updated/STITCHIT/regression_200k100k90t85kbchr21"

// /////////////////////////////////////////////////////////////////////////////////////////
// // Flag STITCHIT: nested or normal version:
// env.mode = 'normal' //Default: 'normal', Options: ['normal', 'nested']

